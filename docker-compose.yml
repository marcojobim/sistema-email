version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      args:
        BACKEND_URL: ${FRONTEND_BACKEND_URL}
    container_name: frontend
    ports:
      - "8080:80"
    environment:
      - BACKEND_URL=${FRONTEND_BACKEND_URL}
    depends_on:
      gerenciamento:
        condition: service_started
    networks:
      - EmailNetwork

  db_gerenciamento:
    image: postgres:16
    container_name: db_gerenciamento
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - EmailNetwork

  gerenciamento:
    build:
      context: ./gerenciamento/src
    container_name: gerenciamento
    ports:
      - "5000:8080"
    environment:
      - DATABASE_CONNECTION=Host=db_gerenciamento;Port=5432;Database=${DATABASE_NAME};Username=${DATABASE_USER};Password=${DATABASE_PASSWORD}
      - EMAIL_ENVIO_URL=${EMAIL_ENVIO_URL}
    depends_on:
      db_gerenciamento:
        condition: service_healthy
    networks:
      - EmailNetwork

  envio:
    build: ./envio
    container_name: envio
    ports:
      - "5001:5000"
    environment:
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    networks:
      - EmailNetwork

volumes:
  pgdata:

networks:
  EmailNetwork:
    driver: bridge